# Copyright libOpenCOR contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.15)

# Compute the SHA-1 values.

set(SHA1_VALUES)

foreach(SHA1_FILE @ARG_SHA1_FILES@)
    set(SHA1_FILENAME "@CMAKE_BINARY_DIR@/@PACKAGE_NAME@/install/${SHA1_FILE}")

    if(EXISTS ${SHA1_FILENAME})
        file(SHA1 ${SHA1_FILENAME} SHA1_VALUE)

        list(APPEND SHA1_VALUES ${SHA1_VALUE})
    else()
        message(FATAL_ERROR "${SHA1_FILENAME} is missing from the ${PACKAGE_NAME} package.")
    endif()
endforeach()

# Create the package itself.

set(PACKAGE_FILE @CMAKE_BINARY_DIR@/@PACKAGE_NAME@.@PACKAGE_VERSION@.@TARGET_PLATFORM@.tar.gz)

execute_process(COMMAND ${CMAKE_COMMAND} -E tar -czf ${PACKAGE_FILE} @ARG_PACKAGED_FILES@
                WORKING_DIRECTORY @CMAKE_BINARY_DIR@/@PACKAGE_NAME@/install
                RESULT_VARIABLE RESULT
                OUTPUT_QUIET)

# Calculate the SHA-1 value of our package, if it exists, and let people know
# how we should call the retrieve_package_file() function.

if(RESULT EQUAL 0 AND EXISTS ${PACKAGE_FILE})
    file(SHA1 ${PACKAGE_FILE} SHA1_VALUE)

    string(REPLACE ";" "\n                                  "
           SHA1_VALUES "${SHA1_VALUES}")

    message("To retrieve the @PACKAGE_NAME@ package, use:
retrieve_package_file(\$\{PACKAGE_NAME\} \$\{PACKAGE_VERSION\}
                      \$\{PACKAGE_REPOSITORY\} \$\{RELEASE_TAG\}
                      \$\{INSTALL_DIR\} ${SHA1_VALUE}
                      SHA1_FILES \$\{SHA1_FILES\}
                      SHA1_VALUES ${SHA1_VALUES})")
else()
    if(EXISTS ${PACKAGE_FILE})
        file(REMOVE ${PACKAGE_FILE})
    endif()

    message(FATAL_ERROR "The @PACKAGE_NAME@ package could not be created.")
endif()

