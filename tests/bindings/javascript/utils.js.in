/*
Copyright libOpenCOR contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

export const RESOURCE_LOCATION = "/some/path";

export const UNKNOWN_FILE = "unknown_file.txt";
export const ERROR_CELLML_FILE = "error.cellml";
export const CELLML_FILE = "cellml_2.cellml";
export const SEDML_FILE = "cellml_2.sedml";
export const COMBINE_ARCHIVE = "cellml_2.omex";

export const LOCAL_FILE = resourcePath("file.txt");

// Note: the three following URLs use http rather than https to help with coverage testing.
export const HTTP_REMOTE_CELLML_FILE =
  "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";
export const HTTP_REMOTE_SEDML_FILE =
  "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.sedml";
export const HTTP_REMOTE_COMBINE_ARCHIVE =
  "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.omex";
export const REMOTE_BASE_PATH =
  "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res";
export const REMOTE_FILE =
  "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";

export const NO_CONTENTS = stringToArrayBuffer("");
export const NULL_CHARACTER_CONTENTS = stringToArrayBuffer("\0");
export const UNKNOWN_CONTENTS = stringToArrayBuffer("Some unknown contents...");
export const CELLML_CONTENTS = stringToArrayBuffer(`@CELLML_CONTENTS@`);
export const ERROR_CELLML_CONTENTS = stringToArrayBuffer(
  `@ERROR_CELLML_CONTENTS@`,
);
export const WARNING_CELLML_CONTENTS = stringToArrayBuffer(
  `@WARNING_CELLML_CONTENTS@`,
);
export const SEDML_CONTENTS = stringToArrayBuffer(`@SEDML_CONTENTS@`);
export const SEDML_WITH_ABSOLUTE_CELLML_FILE_CONTENTS = stringToArrayBuffer(
  `@SEDML_WITH_ABSOLUTE_CELLML_FILE_CONTENTS@`,
);
export const SEDML_WITH_REMOTE_CELLML_FILE_CONTENTS = stringToArrayBuffer(
  `@SEDML_WITH_REMOTE_CELLML_FILE_CONTENTS@`,
);
export const SEDML_WITH_SIMULATIONS_CONTENTS = stringToArrayBuffer(
  `@SEDML_WITH_SIMULATIONS_CONTENTS@`,
);
export const COMBINE_ARCHIVE_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_COMBINE_ARCHIVE_CONTENTS@"),
);
export const COMBINE_ARCHIVE_WITH_NO_MANIFEST_FILE_CONTENTS =
  stringToArrayBuffer(
    atob("@BASE64_COMBINE_ARCHIVE_WITH_NO_MANIFEST_FILE_CONTENTS@"),
  );
export const COMBINE_ARCHIVE_WITH_NO_MASTER_FILE_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_COMBINE_ARCHIVE_WITH_NO_MASTER_FILE_CONTENTS@"),
);
export const COMBINE_ARCHIVE_WITH_CELLML_FILE_AS_MASTER_FILE_CONTENTS =
  stringToArrayBuffer(
    atob("@BASE64_COMBINE_ARCHIVE_WITH_CELLML_FILE_AS_MASTER_FILE_CONTENTS@"),
  );
export const COMBINE_ARCHIVE_WITH_UNKNOWN_DIRECT_CELLML_FILE_CONTENTS =
  stringToArrayBuffer(
    atob("@BASE64_COMBINE_ARCHIVE_WITH_UNKNOWN_DIRECT_CELLML_FILE_CONTENTS@"),
  );
export const COMBINE_ARCHIVE_WITH_UNKNOWN_INDIRECT_CELLML_FILE_CONTENTS =
  stringToArrayBuffer(
    atob("@BASE64_COMBINE_ARCHIVE_WITH_UNKNOWN_INDIRECT_CELLML_FILE_CONTENTS@"),
  );
export const COMBINE_ARCHIVE_WITH_UNKNOWN_SEDML_FILE_CONTENTS =
  stringToArrayBuffer(
    atob("@BASE64_COMBINE_ARCHIVE_WITH_UNKNOWN_SEDML_FILE_CONTENTS@"),
  );
export const DATASET_135_OMEX_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_DATASET_135_OMEX_CONTENTS@"),
);
export const DATASET_135_JSON_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_DATASET_135_JSON_CONTENTS@"),
);
export const DATASET_157_OMEX_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_DATASET_157_OMEX_CONTENTS@"),
);
export const DATASET_157_JSON_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_DATASET_157_JSON_CONTENTS@"),
);

export const SOLVER_ODE_CONTENTS = stringToArrayBuffer(`@SOLVER_ODE_CONTENTS@`);
export const SOLVER_NLA1_CONTENTS = stringToArrayBuffer(
  `@SOLVER_NLA1_CONTENTS@`,
);
export const SOLVER_NLA2_CONTENTS = stringToArrayBuffer(
  `@SOLVER_NLA2_CONTENTS@`,
);

export const ALGEBRAIC_CONTENTS = stringToArrayBuffer(`@ALGEBRAIC_CONTENTS@`);
export const DAE_CONTENTS = stringToArrayBuffer(`@DAE_CONTENTS@`);
export const NLA_CONTENTS = stringToArrayBuffer(`@NLA_CONTENTS@`);

export const OVERCONSTRAINED_CONTENTS = stringToArrayBuffer(
  `@OVERCONSTRAINED_CONTENTS@`,
);
export const UNDERCONSTRAINED_CONTENTS = stringToArrayBuffer(
  `@UNDERCONSTRAINED_CONTENTS@`,
);
export const UNSUITABLY_CONSTRAINED_CONTENTS = stringToArrayBuffer(
  `@UNSUITABLY_CONSTRAINED_CONTENTS@`,
);

export const SED_CHANGES_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_SED_CHANGES_CONTENTS@"),
);
export const INVALID_SED_CHANGES_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_INVALID_SED_CHANGES_CONTENTS@"),
);
export const UNSUPPORTED_SED_CHANGES_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_UNSUPPORTED_SED_CHANGES_CONTENTS@"),
);

export const ALGEBRAIC_SED_CHANGES_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_ALGEBRAIC_SED_CHANGES_CONTENTS@"),
);
export const ODE_SED_CHANGES_CONTENTS = stringToArrayBuffer(
  atob("@BASE64_ODE_SED_CHANGES_CONTENTS@"),
);

export function expectIssues(loc, logger, expectedIssues) {
  const issues = logger.issues;

  expect(issues.size()).toBe(expectedIssues.length);

  for (let i = 0; i < issues.size(); ++i) {
    expect(issues.get(i).type.value).toBe(expectedIssues[i][0].value);
    expect(issues.get(i).description).toBe(expectedIssues[i][1]);

    if (issues.get(i).type === loc.Issue.Type.ERROR) {
      expect(issues.get(i).typeAsString).toBe("Error");
    } else {
      expect(issues.get(i).typeAsString).toBe("Warning");
    }
  }
}

export function expectValues(
  instanceTask,
  index,
  stateValues,
  rateValues,
  constantValues,
  computedConstantValues,
  algebraicValues,
) {
  for (let i = 0; i < instanceTask.stateCount; ++i) {
    expect(instanceTask.stateAsArray(i)[index]).toBeCloseTo(stateValues[i], 2);
  }

  for (let i = 0; i < instanceTask.rateCount; ++i) {
    expect(instanceTask.rateAsArray(i)[index]).toBeCloseTo(rateValues[i], 2);
  }

  for (let i = 0; i < instanceTask.constantCount; ++i) {
    expect(instanceTask.constantAsArray(i)[index]).toBeCloseTo(
      constantValues[i],
      7,
    );
  }

  for (let i = 0; i < instanceTask.computedConstantCount; ++i) {
    expect(instanceTask.computedConstantAsArray(i)[index]).toBeCloseTo(
      computedConstantValues[i],
      7,
    );
  }

  for (let i = 0; i < instanceTask.algebraicCount; ++i) {
    expect(instanceTask.algebraicAsArray(i)[index]).toBeCloseTo(
      algebraicValues[i],
      1,
    );
  }
}

export function allocateMemory(module, arrayBuffer) {
  const memPtr = module._malloc(arrayBuffer.length);
  const mem = new Uint8Array(module.HEAPU8.buffer, memPtr, arrayBuffer.length);

  mem.set(arrayBuffer);

  return memPtr;
}

export function freeMemory(module, memPtr) {
  module._free(memPtr);
}

function stringToArrayBuffer(string) {
  return Uint8Array.from(string, (c) => c.charCodeAt(0));
}

export function resourcePath(resourceRelativePath) {
  return RESOURCE_LOCATION + "/" + resourceRelativePath;
}
