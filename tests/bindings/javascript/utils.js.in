/*
Copyright libOpenCOR contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

const RESOURCE_LOCATION = "@RESOURCE_LOCATION@";

export const NON_RETRIEVABLE_FILE = "non_retrievable_file.txt";
export const UNKNOWN_FILE = "unknown_file.txt";
export const SBML_FILE = "sbml.sbml";
export const ERROR_SEDML_FILE = "error.sedml";
export const CELLML_1_X_FILE = "cellml_1_x.cellml";
export const SEDML_1_X_FILE = "cellml_1_x.sedml";
export const COMBINE_1_X_ARCHIVE = "cellml_1_x.omex";
export const CELLML_2_FILE = "cellml_2.cellml";
export const SEDML_2_FILE = "cellml_2.sedml";
export const COMBINE_2_ARCHIVE = "cellml_2.omex";

export const LOCAL_FILE = "/some/path/file.txt";

export const HTTP_REMOTE_FILE =
  "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";
export const REMOTE_FILE =
  "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";
export const IRRETRIEVABLE_REMOTE_FILE =
  "https://my.domain.com/irretrievable_file.txt";

export const SOME_UNKNOWN_CONTENTS = new Blob(["Some unknown contents..."]);
export const SOME_CELLML_CONTENTS = new Blob([`@SOME_CELLML_CONTENTS@`]);
export const SOME_SEDML_CONTENTS = new Blob([`@SOME_SEDML_CONTENTS@`]);

export function resourcePath(relativePath = "") {
  return RESOURCE_LOCATION + "/" + relativePath;
}

export async function createBlobPtr(module, blob) {
  const blobArrayBuffer = await blob.arrayBuffer();
  const blobPtr = module._malloc(blob.size);
  const blobMem = new Uint8Array(module.HEAPU8.buffer, blobPtr, blob.size);

  blobMem.set(new Uint8Array(blobArrayBuffer));

  return blobPtr;
}

export async function deleteBlobPtr(module, blobPtr) {
  module._free(blobPtr);
}

export async function blobToString(blob) {
  const blobArrayBuffer = await blob.arrayBuffer();
  const decoder = new TextDecoder();

  return decoder.decode(blobArrayBuffer);
}

export function arrayBufferToString(arrayBuffer) {
  const decoder = new TextDecoder();

  return decoder.decode(arrayBuffer);
}
