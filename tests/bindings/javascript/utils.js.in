/*
Copyright libOpenCOR contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

export const UNKNOWN_FILE = "unknown_file.txt";

export const LOCAL_BASE_PATH = "/some/path";
export const LOCAL_FILE = "/some/path/file.txt";

export const HTTP_REMOTE_FILE =
  "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";
export const REMOTE_BASE_PATH =
  "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res";
export const REMOTE_FILE =
  "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";

export const NO_CONTENTS = stringToArrayBuffer("");
export const SOME_UNKNOWN_CONTENTS = stringToArrayBuffer(
  "Some unknown contents...",
);
export const SOME_CELLML_CONTENTS = stringToArrayBuffer(
  `@SOME_CELLML_CONTENTS@`,
);
export const SOME_ERROR_CELLML_CONTENTS = stringToArrayBuffer(
  `@SOME_ERROR_CELLML_CONTENTS@`,
);
export const SOME_WARNING_CELLML_CONTENTS = stringToArrayBuffer(
  `@SOME_WARNING_CELLML_CONTENTS@`,
);
export const SOME_SEDML_CONTENTS = stringToArrayBuffer(`@SOME_SEDML_CONTENTS@`);
export const SOME_COMBINE_ARCHIVE_CONTENTS = stringToArrayBuffer(
  atob("@SOME_BASE64_COMBINE_ARCHIVE_CONTENTS@"),
);

export const SOME_SOLVER_ODE_CONTENTS = stringToArrayBuffer(
  `@SOME_SOLVER_ODE_CONTENTS@`,
);
export const SOME_SOLVER_NLA1_CONTENTS = stringToArrayBuffer(
  `@SOME_SOLVER_NLA1_CONTENTS@`,
);
export const SOME_SOLVER_NLA2_CONTENTS = stringToArrayBuffer(
  `@SOME_SOLVER_NLA2_CONTENTS@`,
);

export const SOME_ALGEBRAIC_CONTENTS = stringToArrayBuffer(
  `@SOME_ALGEBRAIC_CONTENTS@`,
);
export const SOME_DAE_CONTENTS = stringToArrayBuffer(`@SOME_DAE_CONTENTS@`);
export const SOME_NLA_CONTENTS = stringToArrayBuffer(`@SOME_NLA_CONTENTS@`);

export const SOME_OVERCONSTRAINED_CONTENTS = stringToArrayBuffer(
  `@SOME_OVERCONSTRAINED_CONTENTS@`,
);
export const SOME_UNDERCONSTRAINED_CONTENTS = stringToArrayBuffer(
  `@SOME_UNDERCONSTRAINED_CONTENTS@`,
);
export const SOME_UNSUITABLY_CONSTRAINED_CONTENTS = stringToArrayBuffer(
  `@SOME_UNSUITABLY_CONSTRAINED_CONTENTS@`,
);

export function expectIssues(libopencor, logger, expectedIssues) {
  const issues = logger.issues();

  expect(issues.size()).toBe(expectedIssues.length);

  for (let i = 0; i < issues.size(); ++i) {
    expect(issues.get(i).type().value).toBe(expectedIssues[i][0].value);
    expect(issues.get(i).description()).toBe(expectedIssues[i][1]);

    if (issues.get(i).type() === libopencor.Issue.Type.ERROR) {
      expect(issues.get(i).typeAsString()).toBe("Error");
    } else if (issues.get(i).type() === libopencor.Issue.Type.WARNING) {
      expect(issues.get(i).typeAsString()).toBe("Warning");
    } else {
      expect(issues.get(i).typeAsString()).toBe("Message");
    }
  }
}

export function expectValues(
  libopencor,
  instanceTask,
  index,
  stateValues,
  rateValues,
  variableValues,
) {
  for (let i = 0; i < instanceTask.stateCount(); ++i) {
    expect(instanceTask.stateAsArray(i)[index]).toBeCloseTo(stateValues[i], 6);
  }

  for (let i = 0; i < instanceTask.rateCount(); ++i) {
    expect(instanceTask.rateAsArray(i)[index]).toBeCloseTo(rateValues[i], 6);
  }

  for (let i = 0; i < instanceTask.variableCount(); ++i) {
    expect(instanceTask.variableAsArray(i)[index]).toBeCloseTo(
      variableValues[i],
      6,
    );
  }
}

export function allocateMemory(module, arrayBuffer) {
  const memPtr = module._malloc(arrayBuffer.length);
  const mem = new Uint8Array(module.HEAPU8.buffer, memPtr, arrayBuffer.length);

  mem.set(arrayBuffer);

  return memPtr;
}

export function freeMemory(module, memPtr) {
  module._free(memPtr);
}

function stringToArrayBuffer(string) {
  return Uint8Array.from(string, (c) => c.charCodeAt(0));
}
