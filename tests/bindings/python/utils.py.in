# Copyright libOpenCOR contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import platform


RESOURCE_LOCATION = "@RESOURCE_LOCATION@"


UNKNOWN_FILE = "unknown_file.txt"
SBML_FILE = "sbml.sbml"
ERROR_SEDML_FILE = "error.sedml"
CELLML_1_X_FILE = "cellml_1_x.cellml"
SEDML_1_X_FILE = "cellml_1_x.sedml"
COMBINE_1_X_ARCHIVE = "cellml_1_x.omex"
CELLML_2_FILE = "cellml_2.cellml"
SEDML_2_FILE = "cellml_2.sedml"
COMBINE_2_ARCHIVE = "cellml_2.omex"
IRRETRIEVABLE_FILE = "irretrievable_file.txt"


if platform.system() == "Windows":
    LOCAL_FILE = "P:\\some\\path\\file.txt"
else:
    LOCAL_FILE = "/some/path/file.txt"


HTTP_REMOTE_FILE = "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml"
REMOTE_BASE_PATH = (
    "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res"
)
REMOTE_FILE = "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml"
IRRETRIEVABLE_REMOTE_FILE = "https://some.domain.com/irretrievable_file.txt"


NO_CONTENTS = ""
SOME_UNKNOWN_CONTENTS = "Some unknown contents..."
SOME_CELLML_CONTENTS = """@SOME_CELLML_CONTENTS@"""
SOME_ERROR_CELLML_CONTENTS = """@SOME_ERROR_CELLML_CONTENTS@"""
SOME_WARNING_CELLML_CONTENTS = """@SOME_WARNING_CELLML_CONTENTS@"""
SOME_SEDML_CONTENTS = """@SOME_SEDML_CONTENTS@"""


def assert_issues(expected_issues, logger):
    assert len(expected_issues) == logger.issue_count

    for i in range(len(expected_issues)):
        assert expected_issues[i][0] == logger.issue(i).type
        assert expected_issues[i][1] == logger.issue(i).description


def resource_path(relative_path=""):
    return RESOURCE_LOCATION + "/" + relative_path


def string_to_list(string):
    return [ord(x) for x in string]
