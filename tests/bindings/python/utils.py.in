# Copyright libOpenCOR contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import base64
from libopencor import (
    Issue,
)
import platform
import pytest


RESOURCE_LOCATION = "@RESOURCE_LOCATION@"


UNKNOWN_FILE = "unknown_file.txt"
SBML_FILE = "sbml.sbml"
ERROR_CELLML_FILE = "error.cellml"
ERROR_SEDML_FILE = "error.sedml"
CELLML_1_X_FILE = "cellml_1_x.cellml"
SEDML_1_X_FILE = "cellml_1_x.sedml"
COMBINE_1_X_ARCHIVE = "cellml_1_x.omex"
CELLML_2_FILE = "cellml_2.cellml"
SEDML_2_FILE = "cellml_2.sedml"
COMBINE_2_ARCHIVE = "cellml_2.omex"
IRRETRIEVABLE_FILE = "irretrievable_file.txt"


if platform.system() == "Windows":
    LOCAL_FILE = "P:\\some\\path\\file.txt"
else:
    LOCAL_FILE = "/some/path/file.txt"


HTTP_REMOTE_FILE = "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml"
REMOTE_BASE_PATH = (
    "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res"
)
REMOTE_FILE = "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml"
IRRETRIEVABLE_REMOTE_FILE = "https://some.domain.com/irretrievable_file.txt"


NO_CONTENTS = ""
SOME_UNKNOWN_CONTENTS = "Some unknown contents..."
SOME_CELLML_CONTENTS = """@SOME_CELLML_CONTENTS@"""
SOME_ERROR_CELLML_CONTENTS = """@SOME_ERROR_CELLML_CONTENTS@"""
SOME_WARNING_CELLML_CONTENTS = """@SOME_WARNING_CELLML_CONTENTS@"""
SOME_SEDML_CONTENTS = """@SOME_SEDML_CONTENTS@"""
SOME_COMBINE_ARCHIVE_CONTENTS = base64.b64decode(
    b"@SOME_BASE64_COMBINE_ARCHIVE_CONTENTS@"
)


def assert_issues(logger, expected_issues):
    issues = logger.issues

    assert len(issues) == len(expected_issues)

    for i in range(len(issues)):
        assert issues[i].type == expected_issues[i][0]
        assert issues[i].description == expected_issues[i][1]

        if issues[i].type == Issue.Type.Error:
            assert issues[i].type_as_string == "Error"
        elif issues[i].type == Issue.Type.Warning:
            assert issues[i].type_as_string == "Warning"
        else:
            assert issues[i].type_as_string == "Message"


def assert_values(
    instance_task,
    index,
    state_values,
    state_abs_tols,
    rate_values,
    rate_abs_tols,
    variable_values,
    variable_abs_tols,
):
    for i in range(instance_task.state_count):
        assert instance_task.state(i)[index] == pytest.approx(
            state_values[i], abs=state_abs_tols[i]
        )

    for i in range(instance_task.rate_count):
        assert instance_task.rate(i)[index] == pytest.approx(
            rate_values[i], abs=rate_abs_tols[i]
        )

    for i in range(instance_task.variable_count):
        assert instance_task.variable(i)[index] == pytest.approx(
            variable_values[i], abs=variable_abs_tols[i]
        )


def resource_path(relative_path=""):
    return RESOURCE_LOCATION + "/" + relative_path


def string_to_list(string):
    return [ord(x) for x in string]


def binary_to_list(string):
    return [x for x in string]
