/*
Copyright libOpenCOR contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#pragma once

#define GTEST_DONT_DEFINE_ASSERT_EQ 1
#define GTEST_DONT_DEFINE_ASSERT_NE 1

#include "gtest/gtest.h"

#include "libopencor/issue.h"
#include "libopencor/types.h"

#include <string>
#include <vector>

namespace libOpenCOR {

inline constexpr auto RESOURCE_LOCATION = "@RESOURCE_LOCATION@";

inline constexpr auto UNKNOWN_FILE = "unknown_file.txt";
inline constexpr auto SBML_FILE = "sbml.sbml";
inline constexpr auto ERROR_SEDML_FILE = "error.sedml";
inline constexpr auto CELLML_1_X_FILE = "cellml_1_x.cellml";
inline constexpr auto SEDML_1_X_FILE = "cellml_1_x.sedml";
inline constexpr auto COMBINE_1_X_ARCHIVE = "cellml_1_x.omex";
inline constexpr auto CELLML_2_FILE = "cellml_2.cellml";
inline constexpr auto SEDML_2_FILE = "cellml_2.sedml";
inline constexpr auto COMBINE_2_ARCHIVE = "cellml_2.omex";
inline constexpr auto IRRETRIEVABLE_FILE = "irretrievable_file.txt";

#ifdef _WIN32
inline constexpr auto LOCAL_FILE = R"(P:\some\path\file.txt)";
#else
inline constexpr auto LOCAL_FILE = "/some/path/file.txt";
#endif

inline constexpr auto HTTP_REMOTE_FILE = "http://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";
inline constexpr auto REMOTE_BASE_PATH = "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res";
inline constexpr auto REMOTE_FILE = "https://raw.githubusercontent.com/opencor/libopencor/master/tests/res/cellml_2.cellml";
inline constexpr auto IRRETRIEVABLE_REMOTE_FILE = "https://some.domain.com/irretrievable_file.txt";

inline constexpr auto SOME_UNKNOWN_CONTENTS = "Some unknown contents...";
inline constexpr auto SOME_CELLML_CONTENTS = "@SOME_CELLML_CONTENTS_C@";
inline constexpr auto SOME_ERROR_CELLML_CONTENTS = "@SOME_ERROR_CELLML_CONTENTS_C@";
inline constexpr auto SOME_WARNING_CELLML_CONTENTS = "@SOME_WARNING_CELLML_CONTENTS_C@";
inline constexpr auto SOME_SEDML_CONTENTS = "@SOME_SEDML_CONTENTS_C@";

typedef struct
{
    Issue::Type type;
    std::string description;
} ExpectedIssue;

using ExpectedIssues = std::vector<ExpectedIssue>;

void expectEqualIssues(const LoggerPtr &pLogger, const ExpectedIssues &pExpectedIssues);

#define EXPECT_EQ_ISSUES(pLogger, pExpectedIssues) \
    SCOPED_TRACE("Issue occurred here."); \
    libOpenCOR::expectEqualIssues(pLogger, pExpectedIssues)

using Doubles = std::vector<double>;

void expectEqualDoubles(double *pDoubles, const Doubles &pExpectedDoubles, const Doubles &pAbsoluteErrors);

#define EXPECT_EQ_DOUBLES(pDoubles, pExpectedDoubles, pAbsoluteErrors) \
    SCOPED_TRACE("Issue occurred here."); \
    libOpenCOR::expectEqualDoubles(pDoubles, pExpectedDoubles, pAbsoluteErrors)

void expectEqualHiddenProperties(const StringVector &pHiddenProperties, const StringVector &pExpectedHiddenProperties);

#define EXPECT_EQ_HIDDEN_PROPERTIES(pHiddenProperties, pExpectedHiddenProperties) \
    SCOPED_TRACE("Issue occurred here."); \
    libOpenCOR::expectEqualHiddenProperties(pHiddenProperties, pExpectedHiddenProperties)

std::string resourcePath(const std::string &pResourceRelativePath = {});
std::string textFileContents(const std::string &pFileName);

UnsignedCharVector charArrayToVector(const char *pContents);

} // namespace libOpenCOR
