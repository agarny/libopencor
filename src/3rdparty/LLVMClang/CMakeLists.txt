# Copyright libOpenCOR contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set(PACKAGE_NAME LLVMClang)
set(PACKAGE_VERSION 13.0.0)
set(PACKAGE_REPOSITORY llvm-project)
set(GIT_TAG llvmorg-13.0.0)
set(RELEASE_TAG llvmorg-13.0.0)
set(INSTALL_DIR ${CMAKE_BINARY_DIR}/${PACKAGE_NAME})

set(CLANG_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clang${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_ANALYSIS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangAnalysis${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_API_NOTES_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangAPINotes${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_AST_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangAST${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_AST_MATCHERS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangASTMatchers${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_BASIC_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangBasic${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_CODE_GEN_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangCodeGen${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_CROSS_TU_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangCrossTU${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_DEPENDENCY_SCANNING_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangDependencyScanning${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_DIRECTORY_WATCHERS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangDirectoryWatcher${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_DRIVER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangDriver${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_DYNAMIC_AST_MATCHERS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangDynamicASTMatchers${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_EDIT_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangEdit${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_FORMAT_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangFormat${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_FRONTEND_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangFrontend${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_FRONTEND_TOOL_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangFrontendTool${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_INDEX_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangIndex${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_INDEX_SERIALIZATION_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangIndexSerialization${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_INTERPRETER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangInterpreter${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_LEX_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangLex${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_PARSE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangParse${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_REWRITE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangRewrite${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_REWRITE_FRONTEND_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangRewriteFrontend${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_SEMA_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangSema${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_SERIALIZATION_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangSerialization${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_ANALYZER_CHECKERS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangStaticAnalyzerCheckers${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_STATIC_ANALYZER_CORE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangStaticAnalyzerCore${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_STATIC_ANALYZER_FRONTEND_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangStaticAnalyzerFrontend${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_TESTING_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangTesting${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_TOOLING_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangTooling${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_TOOLING_AST_DIFF_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangToolingASTDiff${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_TOOLING_CORE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangToolingCore${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_TOOLING_INCLUSIONS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangToolingInclusions${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_REFACTORING_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangToolingRefactoring${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_TOOLING_SYNTAX_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangToolingSyntax${CMAKE_STATIC_LIBRARY_SUFFIX})
set(CLANG_TRANSFORMER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}clangTransformer${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_AGGRESSIVE_INST_COMBINE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMAggressiveInstCombine${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_ANALYSIS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMAnalysis${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_ASM_PARSER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMAsmParser${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_ASM_PRINTER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMAsmPrinter${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_BINARY_FORMAT_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMBinaryFormat${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_BIT_READER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMBitReader${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_BITSTREAM_READER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMBitstreamReader${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_BIT_WRITER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMBitWriter${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_CF_GUARD_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMCFGuard${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_CFI_VERIFY_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMCFIVerify${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_CODE_GEN_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMCodeGen${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_CORE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMCore${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_COROUTINES_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMCoroutines${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_COVERAGES_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMCoverage${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DEBUG_INFO_CODE_VIEW_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDebugInfoCodeView${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DEBUG_INFO_DWARF_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDebugInfoDWARF${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DEBUG_INFO_GSYM_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDebugInfoGSYM${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DEBUG_INFO_MSF_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDebugInfoMSF${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DEBUG_INFO_PDB_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDebugInfoPDB${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DEMANGLES_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDemangle${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DLLTOOL_DRIVER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDlltoolDriver${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DWARF_LINKER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDWARFLinker${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_DWP_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMDWP${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_EXECUTION_ENGINE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMExecutionEngine${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_EXEGESIS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMExegesis${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_EXEGESIS_X86_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMExegesisX86${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_EXTENSIONS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMExtensions${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_FILE_CHECK_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMFileCheck${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_FRONTEND_OPEN_ACC_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMFrontendOpenACC${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_FRONTEND_OPENMP_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMFrontendOpenMP${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_FUZZ_MUTATES_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMFuzzMutate${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_GLOBAL_ISELF_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMGlobalISel${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_INST_COMBINE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMInstCombine${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_INSTRUMENTATION_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMInstrumentation${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_INTERFACE_STUB_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMInterfaceStub${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_INTERPRETER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMInterpreter${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_IPO_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMipo${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_IR_READER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMIRReader${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_JIT_LINK_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMJITLink${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_LIB_DRIVER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMLibDriver${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_LINE_EDITOR_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMLineEditor${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_LINKER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMLinker${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_LTO_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMLTO${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_MC_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMMC${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_MCA_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMMCA${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_MC_DISASSEMBLER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMMCDisassembler${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_MC_JIT_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMMCJIT${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_MC_PARSER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMMCParser${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_MIR_PARSER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMMIRParser${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_OBJ_CARC_OPTS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMObjCARCOpts${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_OBJECT_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMObject${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_OBJECT_YAML_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMObjectYAML${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_OPTION_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMOption${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_ORC_JIT_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMOrcJIT${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_ORC_SHARED_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMOrcShared${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_ORC_TARGET_PROCESS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMOrcTargetProcess${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_PASSES_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMPasses${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_PROFILE_DATA_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMProfileData${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_REMARKS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMRemarks${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_RUNTIME_DYLDS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMRuntimeDyld${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_SCALAR_OPTS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMScalarOpts${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_SELECTION_DAG_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMSelectionDAG${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_SUPPORT_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMSupport${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_SYMBOLIZE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMSymbolize${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_TABLE_GEN_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMTableGen${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_TABLE_GEN_GLOBAL_ISEL_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMTableGenGlobalISel${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_TARGET_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMTarget${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_TEXT_API_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMTextAPI${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_TRANSFORM_UTILS_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMTransformUtils${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_VECTORIZE_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMVectorize${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_WINDOWS_MANIFEST_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMWindowsManifest${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_X86_ASM_PARSER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMX86AsmParser${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_X86_CODE_GEN_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMX86CodeGen${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_X86_DESC_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMX86Desc${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_X86_DISASSEMBLER_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMX86Disassembler${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_X86_INFO_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMX86Info${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LLVM_XRAY_LIBRARY lib/${CMAKE_STATIC_LIBRARY_PREFIX}LLVMXRay${CMAKE_STATIC_LIBRARY_SUFFIX})

set(SHA1_FILES
    ${CLANG_LIBRARY}
    ${CLANG_ANALYSIS_LIBRARY}
    ${CLANG_API_NOTES_LIBRARY}
    ${CLANG_AST_LIBRARY}
    ${CLANG_AST_MATCHERS_LIBRARY}
    ${CLANG_BASIC_LIBRARY}
    ${CLANG_CODE_GEN_LIBRARY}
    ${CLANG_CROSS_TU_LIBRARY}
    ${CLANG_DEPENDENCY_SCANNING_LIBRARY}
    ${CLANG_DIRECTORY_WATCHERS_LIBRARY}
    ${CLANG_DRIVER_LIBRARY}
    ${CLANG_DYNAMIC_AST_MATCHERS_LIBRARY}
    ${CLANG_EDIT_LIBRARY}
    ${CLANG_FORMAT_LIBRARY}
    ${CLANG_FRONTEND_LIBRARY}
    ${CLANG_FRONTEND_TOOL_LIBRARY}
    ${CLANG_INDEX_LIBRARY}
    ${CLANG_INDEX_SERIALIZATION_LIBRARY}
    ${CLANG_INTERPRETER_LIBRARY}
    ${CLANG_LEX_LIBRARY}
    ${CLANG_PARSE_LIBRARY}
    ${CLANG_REWRITE_LIBRARY}
    ${CLANG_REWRITE_FRONTEND_LIBRARY}
    ${CLANG_SEMA_LIBRARY}
    ${CLANG_SERIALIZATION_LIBRARY}
    ${CLANG_ANALYZER_CHECKERS_LIBRARY}
    ${CLANG_STATIC_ANALYZER_CORE_LIBRARY}
    ${CLANG_STATIC_ANALYZER_FRONTEND_LIBRARY}
    ${CLANG_TESTING_LIBRARY}
    ${CLANG_TOOLING_LIBRARY}
    ${CLANG_TOOLING_AST_DIFF_LIBRARY}
    ${CLANG_TOOLING_CORE_LIBRARY}
    ${CLANG_TOOLING_INCLUSIONS_LIBRARY}
    ${CLANG_REFACTORING_LIBRARY}
    ${CLANG_TOOLING_SYNTAX_LIBRARY}
    ${CLANG_TRANSFORMER_LIBRARY}
    ${LLVM_AGGRESSIVE_INST_COMBINE_LIBRARY}
    ${LLVM_ANALYSIS_LIBRARY}
    ${LLVM_ASM_PARSER_LIBRARY}
    ${LLVM_ASM_PRINTER_LIBRARY}
    ${LLVM_BINARY_FORMAT_LIBRARY}
    ${LLVM_BIT_READER_LIBRARY}
    ${LLVM_BITSTREAM_READER_LIBRARY}
    ${LLVM_BIT_WRITER_LIBRARY}
    ${LLVM_CF_GUARD_LIBRARY}
    ${LLVM_CFI_VERIFY_LIBRARY}
    ${LLVM_CODE_GEN_LIBRARY}
    ${LLVM_CORE_LIBRARY}
    ${LLVM_COROUTINES_LIBRARY}
    ${LLVM_COVERAGES_LIBRARY}
    ${LLVM_DEBUG_INFO_CODE_VIEW_LIBRARY}
    ${LLVM_DEBUG_INFO_DWARF_LIBRARY}
    ${LLVM_DEBUG_INFO_GSYM_LIBRARY}
    ${LLVM_DEBUG_INFO_MSF_LIBRARY}
    ${LLVM_DEBUG_INFO_PDB_LIBRARY}
    ${LLVM_DEMANGLES_LIBRARY}
    ${LLVM_DLLTOOL_DRIVER_LIBRARY}
    ${LLVM_DWARF_LINKER_LIBRARY}
    ${LLVM_DWP_LIBRARY}
    ${LLVM_EXECUTION_ENGINE_LIBRARY}
    ${LLVM_EXEGESIS_LIBRARY}
    ${LLVM_EXEGESIS_X86_LIBRARY}
    ${LLVM_EXTENSIONS_LIBRARY}
    ${LLVM_FILE_CHECK_LIBRARY}
    ${LLVM_FRONTEND_OPEN_ACC_LIBRARY}
    ${LLVM_FRONTEND_OPENMP_LIBRARY}
    ${LLVM_FUZZ_MUTATES_LIBRARY}
    ${LLVM_GLOBAL_ISELF_LIBRARY}
    ${LLVM_INST_COMBINE_LIBRARY}
    ${LLVM_INSTRUMENTATION_LIBRARY}
    ${LLVM_INTERFACE_STUB_LIBRARY}
    ${LLVM_INTERPRETER_LIBRARY}
    ${LLVM_IPO_LIBRARY}
    ${LLVM_IR_READER_LIBRARY}
    ${LLVM_JIT_LINK_LIBRARY}
    ${LLVM_LIB_DRIVER_LIBRARY}
    ${LLVM_LINE_EDITOR_LIBRARY}
    ${LLVM_LINKER_LIBRARY}
    ${LLVM_LTO_LIBRARY}
    ${LLVM_MC_LIBRARY}
    ${LLVM_MCA_LIBRARY}
    ${LLVM_MC_DISASSEMBLER_LIBRARY}
    ${LLVM_MC_JIT_LIBRARY}
    ${LLVM_MC_PARSER_LIBRARY}
    ${LLVM_MIR_PARSER_LIBRARY}
    ${LLVM_OBJ_CARC_OPTS_LIBRARY}
    ${LLVM_OBJECT_LIBRARY}
    ${LLVM_OBJECT_YAML_LIBRARY}
    ${LLVM_OPTION_LIBRARY}
    ${LLVM_ORC_JIT_LIBRARY}
    ${LLVM_ORC_SHARED_LIBRARY}
    ${LLVM_ORC_TARGET_PROCESS_LIBRARY}
    ${LLVM_PASSES_LIBRARY}
    ${LLVM_PROFILE_DATA_LIBRARY}
    ${LLVM_REMARKS_LIBRARY}
    ${LLVM_RUNTIME_DYLDS_LIBRARY}
    ${LLVM_SCALAR_OPTS_LIBRARY}
    ${LLVM_SELECTION_DAG_LIBRARY}
    ${LLVM_SUPPORT_LIBRARY}
    ${LLVM_SYMBOLIZE_LIBRARY}
    ${LLVM_TABLE_GEN_LIBRARY}
    ${LLVM_TABLE_GEN_GLOBAL_ISEL_LIBRARY}
    ${LLVM_TARGET_LIBRARY}
    ${LLVM_TEXT_API_LIBRARY}
    ${LLVM_TRANSFORM_UTILS_LIBRARY}
    ${LLVM_VECTORIZE_LIBRARY}
    ${LLVM_WINDOWS_MANIFEST_LIBRARY}
    ${LLVM_X86_ASM_PARSER_LIBRARY}
    ${LLVM_X86_CODE_GEN_LIBRARY}
    ${LLVM_X86_DESC_LIBRARY}
    ${LLVM_X86_DISASSEMBLER_LIBRARY}
    ${LLVM_X86_INFO_LIBRARY}
    ${LLVM_XRAY_LIBRARY}
)

# Either retrieve or build our package.

if(LIBOPENCOR_PREBUILT_LLVMCLANG)
    if(WIN32)
        if(RELEASE_MODE)
            message(">>> Retrieving LLVM+Clang...")
        else()
            message(">>> Retrieving LLVM+Clang...")
        endif()
    elseif(APPLE)
        message(">>> Retrieving LLVM+Clang...")
    else()
        message(">>> Retrieving LLVM+Clang...")
    endif()
else()
    ExternalProject_Add(${PACKAGE_NAME}
        GIT_REPOSITORY
            https://github.com/opencor/${PACKAGE_REPOSITORY}
        GIT_TAG
            ${GIT_TAG}
        GIT_SHALLOW
        SOURCE_SUBDIR
            llvm
        CMAKE_GENERATOR
            ${CMAKE_GENERATOR}
        CMAKE_ARGS
            ${CMAKE_ARGS}
            -DCLANG_BUILD_TOOLS=OFF
            -DCLANG_ENABLE_ARCMT=OFF
            -DCLANG_ENABLE_STATIC_ANALYZER=OFF
            -DCLANG_INCLUDE_DOCS=OFF
            -DCLANG_INCLUDE_TESTS=OFF
            -DCLANG_PLUGIN_SUPPORT=OFF
            -DCLANG_TOOL_HANDLE_CXX_BUILD=OFF
            -DCLANG_TOOL_HANDLE_LLVM_BUILD=OFF
            -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}
            -DLIBCLANG_BUILD_STATIC=ON
            -DLLVM_BUILD_RUNTIME=OFF
            -DLLVM_BUILD_RUNTIMES=OFF
            -DLLVM_BUILD_TOOLS=OFF
            -DLLVM_BUILD_UTILS=OFF
            -DLLVM_ENABLE_ASSERTIONS=OFF
            -DLLVM_ENABLE_BACKTRACES=OFF
            -DLLVM_ENABLE_BINDINGS=OFF
            -DLLVM_ENABLE_CRASH_OVERRIDES=OFF
            -DLLVM_ENABLE_DIA_SDK=OFF
            -DLLVM_ENABLE_LIBEDIT=OFF
            -DLLVM_ENABLE_LIBPFM=OFF
            -DLLVM_ENABLE_LIBXML2=OFF
            -DLLVM_ENABLE_MODULE_DEBUGGING=OFF
            -DLLVM_ENABLE_OCAMLDOC=OFF
            -DLLVM_ENABLE_PEDANTIC=OFF
            -DLLVM_ENABLE_PIC=OFF
            -DLLVM_ENABLE_PLUGINS=OFF
            -DLLVM_ENABLE_PROJECTS=clang
            -DLLVM_ENABLE_TERMINFO=OFF
            -DLLVM_ENABLE_WARNINGS=OFF
            -DLLVM_ENABLE_ZLIB=OFF
            -DLLVM_INCLUDE_BENCHMARKS=OFF
            -DLLVM_INCLUDE_DOCS=OFF
            -DLLVM_INCLUDE_EXAMPLES=OFF
            -DLLVM_INCLUDE_GO_TESTS=OFF
            -DLLVM_INCLUDE_RUNTIMES=OFF
            -DLLVM_INCLUDE_TESTS=OFF
            -DLLVM_INCLUDE_TOOLS=ON
            -DLLVM_INCLUDE_UTILS=OFF
            -DLLVM_TARGETS_TO_BUILD=X86
        BUILD_BYPRODUCTS
            ${INSTALL_DIR}/${CLANG_LIBRARY}
            ${INSTALL_DIR}/${CLANG_ANALYSIS_LIBRARY}
            ${INSTALL_DIR}/${CLANG_API_NOTES_LIBRARY}
            ${INSTALL_DIR}/${CLANG_AST_LIBRARY}
            ${INSTALL_DIR}/${CLANG_AST_MATCHERS_LIBRARY}
            ${INSTALL_DIR}/${CLANG_BASIC_LIBRARY}
            ${INSTALL_DIR}/${CLANG_CODE_GEN_LIBRARY}
            ${INSTALL_DIR}/${CLANG_CROSS_TU_LIBRARY}
            ${INSTALL_DIR}/${CLANG_DEPENDENCY_SCANNING_LIBRARY}
            ${INSTALL_DIR}/${CLANG_DIRECTORY_WATCHERS_LIBRARY}
            ${INSTALL_DIR}/${CLANG_DRIVER_LIBRARY}
            ${INSTALL_DIR}/${CLANG_DYNAMIC_AST_MATCHERS_LIBRARY}
            ${INSTALL_DIR}/${CLANG_EDIT_LIBRARY}
            ${INSTALL_DIR}/${CLANG_FORMAT_LIBRARY}
            ${INSTALL_DIR}/${CLANG_FRONTEND_LIBRARY}
            ${INSTALL_DIR}/${CLANG_FRONTEND_TOOL_LIBRARY}
            ${INSTALL_DIR}/${CLANG_INDEX_LIBRARY}
            ${INSTALL_DIR}/${CLANG_INDEX_SERIALIZATION_LIBRARY}
            ${INSTALL_DIR}/${CLANG_INTERPRETER_LIBRARY}
            ${INSTALL_DIR}/${CLANG_LEX_LIBRARY}
            ${INSTALL_DIR}/${CLANG_PARSE_LIBRARY}
            ${INSTALL_DIR}/${CLANG_REWRITE_LIBRARY}
            ${INSTALL_DIR}/${CLANG_REWRITE_FRONTEND_LIBRARY}
            ${INSTALL_DIR}/${CLANG_SEMA_LIBRARY}
            ${INSTALL_DIR}/${CLANG_SERIALIZATION_LIBRARY}
            ${INSTALL_DIR}/${CLANG_ANALYZER_CHECKERS_LIBRARY}
            ${INSTALL_DIR}/${CLANG_STATIC_ANALYZER_CORE_LIBRARY}
            ${INSTALL_DIR}/${CLANG_STATIC_ANALYZER_FRONTEND_LIBRARY}
            ${INSTALL_DIR}/${CLANG_TESTING_LIBRARY}
            ${INSTALL_DIR}/${CLANG_TOOLING_LIBRARY}
            ${INSTALL_DIR}/${CLANG_TOOLING_AST_DIFF_LIBRARY}
            ${INSTALL_DIR}/${CLANG_TOOLING_CORE_LIBRARY}
            ${INSTALL_DIR}/${CLANG_TOOLING_INCLUSIONS_LIBRARY}
            ${INSTALL_DIR}/${CLANG_REFACTORING_LIBRARY}
            ${INSTALL_DIR}/${CLANG_TOOLING_SYNTAX_LIBRARY}
            ${INSTALL_DIR}/${CLANG_TRANSFORMER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_AGGRESSIVE_INST_COMBINE_LIBRARY}
            ${INSTALL_DIR}/${LLVM_ANALYSIS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_ASM_PARSER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_ASM_PRINTER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_BINARY_FORMAT_LIBRARY}
            ${INSTALL_DIR}/${LLVM_BIT_READER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_BITSTREAM_READER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_BIT_WRITER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_CF_GUARD_LIBRARY}
            ${INSTALL_DIR}/${LLVM_CFI_VERIFY_LIBRARY}
            ${INSTALL_DIR}/${LLVM_CODE_GEN_LIBRARY}
            ${INSTALL_DIR}/${LLVM_CORE_LIBRARY}
            ${INSTALL_DIR}/${LLVM_COROUTINES_LIBRARY}
            ${INSTALL_DIR}/${LLVM_COVERAGES_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DEBUG_INFO_CODE_VIEW_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DEBUG_INFO_DWARF_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DEBUG_INFO_GSYM_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DEBUG_INFO_MSF_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DEBUG_INFO_PDB_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DEMANGLES_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DLLTOOL_DRIVER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DWARF_LINKER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_DWP_LIBRARY}
            ${INSTALL_DIR}/${LLVM_EXECUTION_ENGINE_LIBRARY}
            ${INSTALL_DIR}/${LLVM_EXEGESIS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_EXEGESIS_X86_LIBRARY}
            ${INSTALL_DIR}/${LLVM_EXTENSIONS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_FILE_CHECK_LIBRARY}
            ${INSTALL_DIR}/${LLVM_FRONTEND_OPEN_ACC_LIBRARY}
            ${INSTALL_DIR}/${LLVM_FRONTEND_OPENMP_LIBRARY}
            ${INSTALL_DIR}/${LLVM_FUZZ_MUTATES_LIBRARY}
            ${INSTALL_DIR}/${LLVM_GLOBAL_ISELF_LIBRARY}
            ${INSTALL_DIR}/${LLVM_INST_COMBINE_LIBRARY}
            ${INSTALL_DIR}/${LLVM_INSTRUMENTATION_LIBRARY}
            ${INSTALL_DIR}/${LLVM_INTERFACE_STUB_LIBRARY}
            ${INSTALL_DIR}/${LLVM_INTERPRETER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_IPO_LIBRARY}
            ${INSTALL_DIR}/${LLVM_IR_READER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_JIT_LINK_LIBRARY}
            ${INSTALL_DIR}/${LLVM_LIB_DRIVER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_LINE_EDITOR_LIBRARY}
            ${INSTALL_DIR}/${LLVM_LINKER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_LTO_LIBRARY}
            ${INSTALL_DIR}/${LLVM_MC_LIBRARY}
            ${INSTALL_DIR}/${LLVM_MCA_LIBRARY}
            ${INSTALL_DIR}/${LLVM_MC_DISASSEMBLER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_MC_JIT_LIBRARY}
            ${INSTALL_DIR}/${LLVM_MC_PARSER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_MIR_PARSER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_OBJ_CARC_OPTS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_OBJECT_LIBRARY}
            ${INSTALL_DIR}/${LLVM_OBJECT_YAML_LIBRARY}
            ${INSTALL_DIR}/${LLVM_OPTION_LIBRARY}
            ${INSTALL_DIR}/${LLVM_ORC_JIT_LIBRARY}
            ${INSTALL_DIR}/${LLVM_ORC_SHARED_LIBRARY}
            ${INSTALL_DIR}/${LLVM_ORC_TARGET_PROCESS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_PASSES_LIBRARY}
            ${INSTALL_DIR}/${LLVM_PROFILE_DATA_LIBRARY}
            ${INSTALL_DIR}/${LLVM_REMARKS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_RUNTIME_DYLDS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_SCALAR_OPTS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_SELECTION_DAG_LIBRARY}
            ${INSTALL_DIR}/${LLVM_SUPPORT_LIBRARY}
            ${INSTALL_DIR}/${LLVM_SYMBOLIZE_LIBRARY}
            ${INSTALL_DIR}/${LLVM_TABLE_GEN_LIBRARY}
            ${INSTALL_DIR}/${LLVM_TABLE_GEN_GLOBAL_ISEL_LIBRARY}
            ${INSTALL_DIR}/${LLVM_TARGET_LIBRARY}
            ${INSTALL_DIR}/${LLVM_TEXT_API_LIBRARY}
            ${INSTALL_DIR}/${LLVM_TRANSFORM_UTILS_LIBRARY}
            ${INSTALL_DIR}/${LLVM_VECTORIZE_LIBRARY}
            ${INSTALL_DIR}/${LLVM_WINDOWS_MANIFEST_LIBRARY}
            ${INSTALL_DIR}/${LLVM_X86_ASM_PARSER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_X86_CODE_GEN_LIBRARY}
            ${INSTALL_DIR}/${LLVM_X86_DESC_LIBRARY}
            ${INSTALL_DIR}/${LLVM_X86_DISASSEMBLER_LIBRARY}
            ${INSTALL_DIR}/${LLVM_X86_INFO_LIBRARY}
            ${INSTALL_DIR}/${LLVM_XRAY_LIBRARY}
    )

    create_package(${PACKAGE_NAME} ${PACKAGE_VERSION}
                   ${PACKAGE_REPOSITORY} ${RELEASE_TAG}
                   PACKAGED_FILES include ${SHA1_FILES}
                   SHA1_FILES ${SHA1_FILES})
endif()

# Let others find and use our package.

set(LLVMCLANG_ROOT ${INSTALL_DIR} CACHE INTERNAL "${PACKAGE_NAME}'s root directory.")
set(LLVMCLANG_INCLUDE_DIR ${INSTALL_DIR}/include CACHE INTERNAL "${PACKAGE_NAME}'s include directory.")
set(LLVMCLANG_LIBRARIES
    ${INSTALL_DIR}/${CLANG_LIBRARY}
    ${INSTALL_DIR}/${CLANG_ANALYSIS_LIBRARY}
    ${INSTALL_DIR}/${CLANG_API_NOTES_LIBRARY}
    ${INSTALL_DIR}/${CLANG_AST_LIBRARY}
    ${INSTALL_DIR}/${CLANG_AST_MATCHERS_LIBRARY}
    ${INSTALL_DIR}/${CLANG_BASIC_LIBRARY}
    ${INSTALL_DIR}/${CLANG_CODE_GEN_LIBRARY}
    ${INSTALL_DIR}/${CLANG_CROSS_TU_LIBRARY}
    ${INSTALL_DIR}/${CLANG_DEPENDENCY_SCANNING_LIBRARY}
    ${INSTALL_DIR}/${CLANG_DIRECTORY_WATCHERS_LIBRARY}
    ${INSTALL_DIR}/${CLANG_DRIVER_LIBRARY}
    ${INSTALL_DIR}/${CLANG_DYNAMIC_AST_MATCHERS_LIBRARY}
    ${INSTALL_DIR}/${CLANG_EDIT_LIBRARY}
    ${INSTALL_DIR}/${CLANG_FORMAT_LIBRARY}
    ${INSTALL_DIR}/${CLANG_FRONTEND_LIBRARY}
    ${INSTALL_DIR}/${CLANG_FRONTEND_TOOL_LIBRARY}
    ${INSTALL_DIR}/${CLANG_INDEX_LIBRARY}
    ${INSTALL_DIR}/${CLANG_INDEX_SERIALIZATION_LIBRARY}
    ${INSTALL_DIR}/${CLANG_INTERPRETER_LIBRARY}
    ${INSTALL_DIR}/${CLANG_LEX_LIBRARY}
    ${INSTALL_DIR}/${CLANG_PARSE_LIBRARY}
    ${INSTALL_DIR}/${CLANG_REWRITE_LIBRARY}
    ${INSTALL_DIR}/${CLANG_REWRITE_FRONTEND_LIBRARY}
    ${INSTALL_DIR}/${CLANG_SEMA_LIBRARY}
    ${INSTALL_DIR}/${CLANG_SERIALIZATION_LIBRARY}
    ${INSTALL_DIR}/${CLANG_ANALYZER_CHECKERS_LIBRARY}
    ${INSTALL_DIR}/${CLANG_STATIC_ANALYZER_CORE_LIBRARY}
    ${INSTALL_DIR}/${CLANG_STATIC_ANALYZER_FRONTEND_LIBRARY}
    ${INSTALL_DIR}/${CLANG_TESTING_LIBRARY}
    ${INSTALL_DIR}/${CLANG_TOOLING_LIBRARY}
    ${INSTALL_DIR}/${CLANG_TOOLING_AST_DIFF_LIBRARY}
    ${INSTALL_DIR}/${CLANG_TOOLING_CORE_LIBRARY}
    ${INSTALL_DIR}/${CLANG_TOOLING_INCLUSIONS_LIBRARY}
    ${INSTALL_DIR}/${CLANG_REFACTORING_LIBRARY}
    ${INSTALL_DIR}/${CLANG_TOOLING_SYNTAX_LIBRARY}
    ${INSTALL_DIR}/${CLANG_TRANSFORMER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_AGGRESSIVE_INST_COMBINE_LIBRARY}
    ${INSTALL_DIR}/${LLVM_ANALYSIS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_ASM_PARSER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_ASM_PRINTER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_BINARY_FORMAT_LIBRARY}
    ${INSTALL_DIR}/${LLVM_BIT_READER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_BITSTREAM_READER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_BIT_WRITER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_CF_GUARD_LIBRARY}
    ${INSTALL_DIR}/${LLVM_CFI_VERIFY_LIBRARY}
    ${INSTALL_DIR}/${LLVM_CODE_GEN_LIBRARY}
    ${INSTALL_DIR}/${LLVM_CORE_LIBRARY}
    ${INSTALL_DIR}/${LLVM_COROUTINES_LIBRARY}
    ${INSTALL_DIR}/${LLVM_COVERAGES_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DEBUG_INFO_CODE_VIEW_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DEBUG_INFO_DWARF_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DEBUG_INFO_GSYM_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DEBUG_INFO_MSF_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DEBUG_INFO_PDB_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DEMANGLES_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DLLTOOL_DRIVER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DWARF_LINKER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_DWP_LIBRARY}
    ${INSTALL_DIR}/${LLVM_EXECUTION_ENGINE_LIBRARY}
    ${INSTALL_DIR}/${LLVM_EXEGESIS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_EXEGESIS_X86_LIBRARY}
    ${INSTALL_DIR}/${LLVM_EXTENSIONS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_FILE_CHECK_LIBRARY}
    ${INSTALL_DIR}/${LLVM_FRONTEND_OPEN_ACC_LIBRARY}
    ${INSTALL_DIR}/${LLVM_FRONTEND_OPENMP_LIBRARY}
    ${INSTALL_DIR}/${LLVM_FUZZ_MUTATES_LIBRARY}
    ${INSTALL_DIR}/${LLVM_GLOBAL_ISELF_LIBRARY}
    ${INSTALL_DIR}/${LLVM_INST_COMBINE_LIBRARY}
    ${INSTALL_DIR}/${LLVM_INSTRUMENTATION_LIBRARY}
    ${INSTALL_DIR}/${LLVM_INTERFACE_STUB_LIBRARY}
    ${INSTALL_DIR}/${LLVM_INTERPRETER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_IPO_LIBRARY}
    ${INSTALL_DIR}/${LLVM_IR_READER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_JIT_LINK_LIBRARY}
    ${INSTALL_DIR}/${LLVM_LIB_DRIVER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_LINE_EDITOR_LIBRARY}
    ${INSTALL_DIR}/${LLVM_LINKER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_LTO_LIBRARY}
    ${INSTALL_DIR}/${LLVM_MC_LIBRARY}
    ${INSTALL_DIR}/${LLVM_MCA_LIBRARY}
    ${INSTALL_DIR}/${LLVM_MC_DISASSEMBLER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_MC_JIT_LIBRARY}
    ${INSTALL_DIR}/${LLVM_MC_PARSER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_MIR_PARSER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_OBJ_CARC_OPTS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_OBJECT_LIBRARY}
    ${INSTALL_DIR}/${LLVM_OBJECT_YAML_LIBRARY}
    ${INSTALL_DIR}/${LLVM_OPTION_LIBRARY}
    ${INSTALL_DIR}/${LLVM_ORC_JIT_LIBRARY}
    ${INSTALL_DIR}/${LLVM_ORC_SHARED_LIBRARY}
    ${INSTALL_DIR}/${LLVM_ORC_TARGET_PROCESS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_PASSES_LIBRARY}
    ${INSTALL_DIR}/${LLVM_PROFILE_DATA_LIBRARY}
    ${INSTALL_DIR}/${LLVM_REMARKS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_RUNTIME_DYLDS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_SCALAR_OPTS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_SELECTION_DAG_LIBRARY}
    ${INSTALL_DIR}/${LLVM_SUPPORT_LIBRARY}
    ${INSTALL_DIR}/${LLVM_SYMBOLIZE_LIBRARY}
    ${INSTALL_DIR}/${LLVM_TABLE_GEN_LIBRARY}
    ${INSTALL_DIR}/${LLVM_TABLE_GEN_GLOBAL_ISEL_LIBRARY}
    ${INSTALL_DIR}/${LLVM_TARGET_LIBRARY}
    ${INSTALL_DIR}/${LLVM_TEXT_API_LIBRARY}
    ${INSTALL_DIR}/${LLVM_TRANSFORM_UTILS_LIBRARY}
    ${INSTALL_DIR}/${LLVM_VECTORIZE_LIBRARY}
    ${INSTALL_DIR}/${LLVM_WINDOWS_MANIFEST_LIBRARY}
    ${INSTALL_DIR}/${LLVM_X86_ASM_PARSER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_X86_CODE_GEN_LIBRARY}
    ${INSTALL_DIR}/${LLVM_X86_DESC_LIBRARY}
    ${INSTALL_DIR}/${LLVM_X86_DISASSEMBLER_LIBRARY}
    ${INSTALL_DIR}/${LLVM_X86_INFO_LIBRARY}
    ${INSTALL_DIR}/${LLVM_XRAY_LIBRARY}
    CACHE INTERNAL "${PACKAGE_NAME}'s libraries."
)
